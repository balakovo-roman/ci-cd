name: CI-CD Workflow

on:
  push:
    branches:
      - "main"
    tags:
      - "release-*"
  pull_request:
    branches:
      - "main"

env:
  PROJECT_VERSION_PATCH: ${{ github.run_number }}

jobs:
  check-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Check code formatting
        run: |
          if ! find source -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run --Werror; then
            echo "::error::Code formatting issues were found. Please run 'clang-format' to fix them."
            exit 1
          else
            echo "Code is properly formatted."
          fi

  test-sanitizers:
    runs-on: ubuntu-latest
    needs: check-format
    strategy:
      matrix:
        preset: [ci-asan, ci-tsan]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++

      - name: Sanitizer workflow
        run: cmake --workflow --preset ${{ matrix.preset }}

  build-clang-tidy:
    runs-on: ubuntu-latest
    needs: check-format
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build g++

    - name: Clang-tidy workflow
      run: cmake --workflow --preset ci-clang-tidy

  build-coverage-report:
    runs-on: ubuntu-latest
    needs: check-format
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ gcovr

      - name: Coverage workflow
        run: cmake --workflow --preset coverage

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage/coverage-report/

  release:
    runs-on: ubuntu-latest
    needs: [test-sanitizers, build-clang-tidy, build-coverage-report]
    if: startsWith(github.ref, 'refs/tags/release-')

    steps:
    - uses: actions/checkout@v4

    - name: Install DEB tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build g++

    - name: Release workflow
      run: cmake --workflow --preset release

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload DEB package to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/release/helloworld-0.0.$PROJECT_VERSION_PATCH-Linux.deb
        asset_name: helloworld-0.0.$PROJECT_VERSION_PATCH-Linux.deb
        asset_content_type: application/vnd.debian.binary-package